{"version":3,"file":"glimmer-overrides.js","sources":["../../src/-private/opcodes.ts","../../src/-private/@glimmer/opcodes.ts","../../src/-private/override-glimmer-runtime-classes.ts","../../src/initializers/glimmer-overrides.ts"],"sourcesContent":["import type { ComponentInstance } from '@glimmer/interfaces';\nimport type { UpdatingVM } from '@glimmer/runtime';\n\nexport class ProvideConsumeContextUpdateOpcode {\n  // \"instance\" is a VM component instance\n  constructor(private instance: ComponentInstance) {}\n\n  // vm is an instance of the updating VM:\n  // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/update.ts#L33\n  evaluate(vm: UpdatingVM) {\n    vm.env.provideConsumeContextContainer?.enter(this.instance);\n  }\n}\n\nexport class ProvideConsumeContextDidRenderOpcode {\n  // \"instance\" is a VM component instance\n  constructor(private instance: ComponentInstance) {}\n\n  // vm is an instance of the updating VM:\n  // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/update.ts#L33\n  evaluate(vm: UpdatingVM) {\n    vm.env.provideConsumeContextContainer?.exit(this.instance);\n  }\n}\n","// We can't use enums from @glimmer/interfaces due to the issue below:\n// https://github.com/glimmerjs/glimmer-vm/issues/1294\n// We can use type imports, but an enum would need to be transformed into JS,\n// which fails.\n// We copy the opcodes from the source into here, and only the ones that are\n// relevant to us.\n// This is safe, because the opcodes should be stable.\n// https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/vm/lib/opcodes.ts#L196\nexport const enum Op {\n  CreateComponent = 87,\n  GetComponentSelf = 90,\n  DidRenderLayout = 100,\n}\n","import {\n  ProvideConsumeContextDidRenderOpcode,\n  ProvideConsumeContextUpdateOpcode,\n} from './opcodes';\nimport { ProvideConsumeContextContainer } from './provide-consume-context-container';\nimport type { ComponentInstance } from '@glimmer/interfaces';\nimport type {\n  LowLevelVM as GlimmerLowLevelVM,\n  EnvironmentImpl as GlimmerEnvironmentImpl,\n} from '@glimmer/runtime';\nimport { Op } from './@glimmer/opcodes';\n\nfunction overrideVM(runtime: any) {\n  const LowLevelVM = runtime.LowLevelVM as any;\n\n  // Ember 6\n  if (LowLevelVM.prototype.evaluateOuter != null) {\n    const originalEvaluateOuter = LowLevelVM.prototype.evaluateOuter;\n    LowLevelVM.prototype.evaluateOuter = function (opcode: any, vm: any) {\n      try {\n        const { type, op1 } = opcode;\n\n        if (type === Op.CreateComponent) {\n          // Let the container know we're instantiating a new component\n          this.context.env.provideConsumeContextContainer?.createComponent();\n          // No need to register \"updateWith\", a component only instantiates\n          // once, and we don't need to run any further updates\n        }\n\n        if (type === Op.GetComponentSelf) {\n          // Get the component instance from the VM\n          // (that's the VM's component instance, not the Glimmer Component one)\n          // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L579\n          const instance = vm.fetchValue(op1);\n\n          // Add the component to the stack\n          this.context.env.provideConsumeContextContainer?.enter(instance);\n          // When there are updates/rerenders, make sure we add to the stack again\n          vm.updateWith(new ProvideConsumeContextUpdateOpcode(instance));\n        }\n\n        if (type === Op.DidRenderLayout) {\n          // Get the component instance from the VM\n          // (that's the VM's component instance, not the Glimmer Component one)\n          // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L832\n          const instance = vm.fetchValue(op1);\n\n          // After the component has rendered, remove it from the stack\n          this.context.env.provideConsumeContextContainer?.exit(instance);\n          // On updates/rerenders, make sure to remove from the stack again\n          vm.updateWith(new ProvideConsumeContextDidRenderOpcode(instance));\n        }\n      } catch {\n        // ignore\n      }\n\n      return originalEvaluateOuter.call(this, opcode, vm);\n    };\n  }\n\n  // Ember before 6\n  if (LowLevelVM.prototype.next != null) {\n    const originalNext = LowLevelVM.prototype.next;\n    // We can't reach into the opcode definitions themselves, but we can hook into\n    // when they're evaluated (\"next\"), and execute additional code when the\n    // opcodes we're interested are called.\n    // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/append.ts#L603C1-L603C1\n    LowLevelVM.prototype.next = function (this: GlimmerLowLevelVM) {\n      // The actual evaluation happens in the \"low level VM\":\n      // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/low-level.ts#L112\n      // but that isn't exposed to us.\n      // Luckily, the VM we do have access to exposes the \"pc\" register, and the\n      // \"program\" instance, which is all we need to get the current opcode.\n      const opcode = this.program.opcode(this.pc);\n\n      // Getting \"type\" may fail with \"Expected value to be present\", coming from\n      // https://github.com/glimmerjs/glimmer-vm/blob/f03632077d98910de7ae3f7c22ebed98cb4f909a/packages/%40glimmer/program/lib/program.ts#L116\n      try {\n        const { type, op1 } = opcode;\n\n        if (type === Op.CreateComponent) {\n          // Let the container know we're instantiating a new component\n          this.env.provideConsumeContextContainer?.createComponent();\n          // No need to register \"updateWith\", a component only instantiates\n          // once, and we don't need to run any further updates\n        }\n\n        if (type === Op.GetComponentSelf) {\n          // Get the component instance from the VM\n          // (that's the VM's component instance, not the Glimmer Component one)\n          // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L579\n          const instance = this.fetchValue<ComponentInstance>(op1);\n\n          // Add the component to the stack\n          this.env.provideConsumeContextContainer?.enter(instance);\n          // When there are updates/rerenders, make sure we add to the stack again\n          this.updateWith(new ProvideConsumeContextUpdateOpcode(instance));\n        }\n\n        if (type === Op.DidRenderLayout) {\n          // Get the component instance from the VM\n          // (that's the VM's component instance, not the Glimmer Component one)\n          // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L832\n          const instance = this.fetchValue<ComponentInstance>(op1);\n\n          // After the component has rendered, remove it from the stack\n          this.env.provideConsumeContextContainer?.exit(instance);\n          // On updates/rerenders, make sure to remove from the stack again\n          this.updateWith(new ProvideConsumeContextDidRenderOpcode(instance));\n        }\n      } catch {\n        // ignore\n      }\n\n      return originalNext.apply(this);\n    };\n  }\n}\n\nfunction overrideEnvironment(runtime: any) {\n  const EnvironmentImpl =\n    runtime.EnvironmentImpl as typeof GlimmerEnvironmentImpl;\n\n  const originalBegin = EnvironmentImpl.prototype.begin;\n  EnvironmentImpl.prototype.begin = function () {\n    if (this.provideConsumeContextContainer == null) {\n      this.provideConsumeContextContainer =\n        new ProvideConsumeContextContainer();\n    }\n\n    // When a render transaction is started, let our container know to reset\n    // the stack\n    (this as any).provideConsumeContextContainer?.begin();\n\n    return originalBegin.apply(this);\n  };\n\n  const originalCommit = EnvironmentImpl.prototype.commit;\n  EnvironmentImpl.prototype.commit = function () {\n    if (this.provideConsumeContextContainer == null) {\n      this.provideConsumeContextContainer =\n        new ProvideConsumeContextContainer();\n    }\n\n    // When a render transaction is finished, let our container lnow to reset\n    // the stack\n    this.provideConsumeContextContainer?.commit();\n\n    return originalCommit.apply(this);\n  };\n}\n\nexport function overrideGlimmerRuntime(runtime: any) {\n  overrideVM(runtime);\n  overrideEnvironment(runtime);\n}\n","import { overrideGlimmerRuntime } from '../-private/override-glimmer-runtime-classes';\nimport * as glimmerRuntime from '@glimmer/runtime';\n\nexport function initialize() {\n  overrideGlimmerRuntime(glimmerRuntime);\n}\n\nexport default {\n  initialize,\n};\n"],"names":["ProvideConsumeContextUpdateOpcode","constructor","instance","evaluate","vm","env","provideConsumeContextContainer","enter","ProvideConsumeContextDidRenderOpcode","exit","Op","overrideVM","runtime","LowLevelVM","prototype","evaluateOuter","originalEvaluateOuter","opcode","type","op1","CreateComponent","context","createComponent","GetComponentSelf","fetchValue","updateWith","DidRenderLayout","call","next","originalNext","program","pc","apply","overrideEnvironment","EnvironmentImpl","originalBegin","begin","ProvideConsumeContextContainer","originalCommit","commit","overrideGlimmerRuntime","initialize","glimmerRuntime"],"mappings":";;;AAGO,MAAMA,iCAAiC,CAAC;AAC7C;EACAC,WAAWA,CAASC,QAA2B,EAAE;IAAA,IAA7BA,CAAAA,QAA2B,GAA3BA,QAA2B,CAAA;AAAG,GAAA;;AAElD;AACA;EACAC,QAAQA,CAACC,EAAc,EAAE;IACvBA,EAAE,CAACC,GAAG,CAACC,8BAA8B,EAAEC,KAAK,CAAC,IAAI,CAACL,QAAQ,CAAC,CAAA;AAC7D,GAAA;AACF,CAAA;AAEO,MAAMM,oCAAoC,CAAC;AAChD;EACAP,WAAWA,CAASC,QAA2B,EAAE;IAAA,IAA7BA,CAAAA,QAA2B,GAA3BA,QAA2B,CAAA;AAAG,GAAA;;AAElD;AACA;EACAC,QAAQA,CAACC,EAAc,EAAE;IACvBA,EAAE,CAACC,GAAG,CAACC,8BAA8B,EAAEG,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC,CAAA;AAC5D,GAAA;AACF;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkBQ,IAAAA,EAAE,0BAAFA,EAAE,EAAA;AAAFA,EAAAA,EAAE,CAAFA,EAAE,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;AAAFA,EAAAA,EAAE,CAAFA,EAAE,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA,CAAA;AAAFA,EAAAA,EAAE,CAAFA,EAAE,CAAA,iBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,iBAAA,CAAA;AAAA,EAAA,OAAFA,EAAE,CAAA;AAAA,CAAA,CAAA,EAAA,CAAA;;ACIpB,SAASC,UAAUA,CAACC,OAAY,EAAE;AAChC,EAAA,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAiB,CAAA;;AAE5C;AACA,EAAA,IAAIA,UAAU,CAACC,SAAS,CAACC,aAAa,IAAI,IAAI,EAAE;AAC9C,IAAA,MAAMC,qBAAqB,GAAGH,UAAU,CAACC,SAAS,CAACC,aAAa,CAAA;IAChEF,UAAU,CAACC,SAAS,CAACC,aAAa,GAAG,UAAUE,MAAW,EAAEb,EAAO,EAAE;MACnE,IAAI;QACF,MAAM;UAAEc,IAAI;AAAEC,UAAAA,GAAAA;AAAI,SAAC,GAAGF,MAAM,CAAA;AAE5B,QAAA,IAAIC,IAAI,KAAKR,EAAE,CAACU,eAAe,EAAE;AAC/B;UACA,IAAI,CAACC,OAAO,CAAChB,GAAG,CAACC,8BAA8B,EAAEgB,eAAe,EAAE,CAAA;AAClE;AACA;AACF,SAAA;AAEA,QAAA,IAAIJ,IAAI,KAAKR,EAAE,CAACa,gBAAgB,EAAE;AAChC;AACA;AACA;AACA,UAAA,MAAMrB,QAAQ,GAAGE,EAAE,CAACoB,UAAU,CAACL,GAAG,CAAC,CAAA;;AAEnC;UACA,IAAI,CAACE,OAAO,CAAChB,GAAG,CAACC,8BAA8B,EAAEC,KAAK,CAACL,QAAQ,CAAC,CAAA;AAChE;UACAE,EAAE,CAACqB,UAAU,CAAC,IAAIzB,iCAAiC,CAACE,QAAQ,CAAC,CAAC,CAAA;AAChE,SAAA;AAEA,QAAA,IAAIgB,IAAI,KAAKR,EAAE,CAACgB,eAAe,EAAE;AAC/B;AACA;AACA;AACA,UAAA,MAAMxB,QAAQ,GAAGE,EAAE,CAACoB,UAAU,CAACL,GAAG,CAAC,CAAA;;AAEnC;UACA,IAAI,CAACE,OAAO,CAAChB,GAAG,CAACC,8BAA8B,EAAEG,IAAI,CAACP,QAAQ,CAAC,CAAA;AAC/D;UACAE,EAAE,CAACqB,UAAU,CAAC,IAAIjB,oCAAoC,CAACN,QAAQ,CAAC,CAAC,CAAA;AACnE,SAAA;AACF,OAAC,CAAC,MAAM;AACN;AAAA,OAAA;MAGF,OAAOc,qBAAqB,CAACW,IAAI,CAAC,IAAI,EAAEV,MAAM,EAAEb,EAAE,CAAC,CAAA;KACpD,CAAA;AACH,GAAA;;AAEA;AACA,EAAA,IAAIS,UAAU,CAACC,SAAS,CAACc,IAAI,IAAI,IAAI,EAAE;AACrC,IAAA,MAAMC,YAAY,GAAGhB,UAAU,CAACC,SAAS,CAACc,IAAI,CAAA;AAC9C;AACA;AACA;AACA;AACAf,IAAAA,UAAU,CAACC,SAAS,CAACc,IAAI,GAAG,YAAmC;AAC7D;AACA;AACA;AACA;AACA;MACA,MAAMX,MAAM,GAAG,IAAI,CAACa,OAAO,CAACb,MAAM,CAAC,IAAI,CAACc,EAAE,CAAC,CAAA;;AAE3C;AACA;MACA,IAAI;QACF,MAAM;UAAEb,IAAI;AAAEC,UAAAA,GAAAA;AAAI,SAAC,GAAGF,MAAM,CAAA;AAE5B,QAAA,IAAIC,IAAI,KAAKR,EAAE,CAACU,eAAe,EAAE;AAC/B;AACA,UAAA,IAAI,CAACf,GAAG,CAACC,8BAA8B,EAAEgB,eAAe,EAAE,CAAA;AAC1D;AACA;AACF,SAAA;AAEA,QAAA,IAAIJ,IAAI,KAAKR,EAAE,CAACa,gBAAgB,EAAE;AAChC;AACA;AACA;AACA,UAAA,MAAMrB,QAAQ,GAAG,IAAI,CAACsB,UAAU,CAAoBL,GAAG,CAAC,CAAA;;AAExD;UACA,IAAI,CAACd,GAAG,CAACC,8BAA8B,EAAEC,KAAK,CAACL,QAAQ,CAAC,CAAA;AACxD;UACA,IAAI,CAACuB,UAAU,CAAC,IAAIzB,iCAAiC,CAACE,QAAQ,CAAC,CAAC,CAAA;AAClE,SAAA;AAEA,QAAA,IAAIgB,IAAI,KAAKR,EAAE,CAACgB,eAAe,EAAE;AAC/B;AACA;AACA;AACA,UAAA,MAAMxB,QAAQ,GAAG,IAAI,CAACsB,UAAU,CAAoBL,GAAG,CAAC,CAAA;;AAExD;UACA,IAAI,CAACd,GAAG,CAACC,8BAA8B,EAAEG,IAAI,CAACP,QAAQ,CAAC,CAAA;AACvD;UACA,IAAI,CAACuB,UAAU,CAAC,IAAIjB,oCAAoC,CAACN,QAAQ,CAAC,CAAC,CAAA;AACrE,SAAA;AACF,OAAC,CAAC,MAAM;AACN;AAAA,OAAA;AAGF,MAAA,OAAO2B,YAAY,CAACG,KAAK,CAAC,IAAI,CAAC,CAAA;KAChC,CAAA;AACH,GAAA;AACF,CAAA;AAEA,SAASC,mBAAmBA,CAACrB,OAAY,EAAE;AACzC,EAAA,MAAMsB,eAAe,GACnBtB,OAAO,CAACsB,eAAgD,CAAA;AAE1D,EAAA,MAAMC,aAAa,GAAGD,eAAe,CAACpB,SAAS,CAACsB,KAAK,CAAA;AACrDF,EAAAA,eAAe,CAACpB,SAAS,CAACsB,KAAK,GAAG,YAAY;AAC5C,IAAA,IAAI,IAAI,CAAC9B,8BAA8B,IAAI,IAAI,EAAE;AAC/C,MAAA,IAAI,CAACA,8BAA8B,GACjC,IAAI+B,8BAA8B,EAAE,CAAA;AACxC,KAAA;;AAEA;AACA;AACC,IAAA,IAAI,CAAS/B,8BAA8B,EAAE8B,KAAK,EAAE,CAAA;AAErD,IAAA,OAAOD,aAAa,CAACH,KAAK,CAAC,IAAI,CAAC,CAAA;GACjC,CAAA;AAED,EAAA,MAAMM,cAAc,GAAGJ,eAAe,CAACpB,SAAS,CAACyB,MAAM,CAAA;AACvDL,EAAAA,eAAe,CAACpB,SAAS,CAACyB,MAAM,GAAG,YAAY;AAC7C,IAAA,IAAI,IAAI,CAACjC,8BAA8B,IAAI,IAAI,EAAE;AAC/C,MAAA,IAAI,CAACA,8BAA8B,GACjC,IAAI+B,8BAA8B,EAAE,CAAA;AACxC,KAAA;;AAEA;AACA;AACA,IAAA,IAAI,CAAC/B,8BAA8B,EAAEiC,MAAM,EAAE,CAAA;AAE7C,IAAA,OAAOD,cAAc,CAACN,KAAK,CAAC,IAAI,CAAC,CAAA;GAClC,CAAA;AACH,CAAA;AAEO,SAASQ,sBAAsBA,CAAC5B,OAAY,EAAE;EACnDD,UAAU,CAACC,OAAO,CAAC,CAAA;EACnBqB,mBAAmB,CAACrB,OAAO,CAAC,CAAA;AAC9B;;ACxJO,SAAS6B,UAAUA,GAAG;EAC3BD,sBAAsB,CAACE,cAAc,CAAC,CAAA;AACxC,CAAA;AAEA,uBAAe;AACbD,EAAAA,UAAAA;AACF,CAAC;;;;"}