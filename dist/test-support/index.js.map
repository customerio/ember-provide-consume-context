{"version":3,"file":"index.js","sources":["../../src/test-support/index.ts"],"sourcesContent":["import { getContext } from '@ember/test-helpers';\nimport type { TestContext } from '@ember/test-helpers';\nimport type { ProvideConsumeContextContainer } from '../-private/provide-consume-context-container';\nimport type ContextRegistry from '../context-registry';\n\nexport function setupRenderWrapper(templateFactory: object) {\n  const context = getContext() as TestContext | undefined;\n  if (context == null) {\n    throw new Error('Could not find test context');\n  }\n\n  if (context.owner == null) {\n    throw new Error('Could not find owner on test context');\n  }\n\n  const { owner } = context;\n\n  // Registers a custom outlet to use in the test, similar to how test-helpers does it:\n  // https://github.com/emberjs/ember-test-helpers/blob/9cec68dc6aa9c0a7a449eb89797eb81299fa727f/addon/addon-test-support/%40ember/test-helpers/setup-rendering-context.ts#L68\n  // Casting \"as any\" because \"unregister\" isn't defined on the Owner type, but it does exist.\n  (owner as any).unregister('template:-outlet');\n  owner.register('template:-outlet', templateFactory);\n}\n\nexport function provide<\n  T extends keyof ContextRegistry,\n  U extends ContextRegistry[T],\n>(name: T, value: U) {\n  const context = getContext() as TestContext | undefined;\n  if (context?.owner != null) {\n    const { owner } = context;\n\n    // https://github.com/emberjs/ember.js/blob/57073a0e9751d036d4bcfc11d5367e3f6ae751d2/packages/%40ember/-internals/glimmer/lib/renderer.ts#L284\n    // We cast to \"any\", because Renderer is a private API and isn't easily accessible.\n    // Even if we imported the type, \"_runtime\" is marked as private,\n    // so we wouldn't be able to access the current runtime or its type.\n    // If Context was implemented in Ember proper, it would have access to those private\n    // APIs, and this wouldn't look quite as illegal anymore.\n    const renderer = owner.lookup('renderer:-dom') as any;\n\n    if (renderer == null) {\n      throw new Error('Could not find \"renderer:-dom\" on owner');\n    }\n\n    // In Ember 6 the path to env is renderer._context.env,\n    // before that it was renderer._runtime.env\n    const env = renderer._runtime?.env ?? renderer._context?.env;\n    const container = env?.provideConsumeContextContainer as\n      | ProvideConsumeContextContainer\n      | undefined;\n\n    if (container == null) {\n      throw new Error(\n        'Could not find \"provideConsumeContextContainer\" instance in runtime environment',\n      );\n    }\n\n    container.registerMockProvider(name, value);\n  }\n}\n"],"names":["setupRenderWrapper","templateFactory","context","getContext","Error","owner","unregister","register","provide","name","value","renderer","lookup","env","_runtime","_context","container","provideConsumeContextContainer","registerMockProvider"],"mappings":";;AAKO,SAASA,kBAAkBA,CAACC,eAAuB,EAAE;AAC1D,EAAA,MAAMC,OAAO,GAAGC,UAAU,EAA6B,CAAA;EACvD,IAAID,OAAO,IAAI,IAAI,EAAE;AACnB,IAAA,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC,CAAA;AAChD,GAAA;AAEA,EAAA,IAAIF,OAAO,CAACG,KAAK,IAAI,IAAI,EAAE;AACzB,IAAA,MAAM,IAAID,KAAK,CAAC,sCAAsC,CAAC,CAAA;AACzD,GAAA;EAEA,MAAM;AAAEC,IAAAA,KAAAA;AAAM,GAAC,GAAGH,OAAO,CAAA;;AAEzB;AACA;AACA;AACCG,EAAAA,KAAK,CAASC,UAAU,CAAC,kBAAkB,CAAC,CAAA;AAC7CD,EAAAA,KAAK,CAACE,QAAQ,CAAC,kBAAkB,EAAEN,eAAe,CAAC,CAAA;AACrD,CAAA;AAEO,SAASO,OAAOA,CAGrBC,IAAO,EAAEC,KAAQ,EAAE;AACnB,EAAA,MAAMR,OAAO,GAAGC,UAAU,EAA6B,CAAA;AACvD,EAAA,IAAID,OAAO,EAAEG,KAAK,IAAI,IAAI,EAAE;IAC1B,MAAM;AAAEA,MAAAA,KAAAA;AAAM,KAAC,GAAGH,OAAO,CAAA;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,MAAMS,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAAC,eAAe,CAAQ,CAAA;IAErD,IAAID,QAAQ,IAAI,IAAI,EAAE;AACpB,MAAA,MAAM,IAAIP,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAC5D,KAAA;;AAEA;AACA;AACA,IAAA,MAAMS,GAAG,GAAGF,QAAQ,CAACG,QAAQ,EAAED,GAAG,IAAIF,QAAQ,CAACI,QAAQ,EAAEF,GAAG,CAAA;AAC5D,IAAA,MAAMG,SAAS,GAAGH,GAAG,EAAEI,8BAEV,CAAA;IAEb,IAAID,SAAS,IAAI,IAAI,EAAE;AACrB,MAAA,MAAM,IAAIZ,KAAK,CACb,iFACF,CAAC,CAAA;AACH,KAAA;AAEAY,IAAAA,SAAS,CAACE,oBAAoB,CAACT,IAAI,EAAEC,KAAK,CAAC,CAAA;AAC7C,GAAA;AACF;;;;"}